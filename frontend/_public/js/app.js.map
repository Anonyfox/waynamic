{"version":3,"file":"_public/js/app.js","sources":["app/app.coffee","app/scripts/controllers.coffee","app/scripts/directives.coffee","app/scripts/filters.coffee","app/scripts/services.coffee"],"names":[],"mappings":"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","sourcesContent":["'use strict'\n\n# Declare app level module which depends on filters, and services\nApp = angular.module('app', [\n  'ngCookies'\n  'ngResource'\n  'ngRoute'\n  'app.controllers'\n  'app.directives'\n  'app.filters'\n  'app.services'\n  'partials'\n])\n\nApp.config([\n  '$routeProvider'\n  '$locationProvider'\n\n($routeProvider, $locationProvider, config) ->\n\n  $routeProvider\n\n    .when('/', {templateUrl: '/partials/landingpage.html'})\n    .when('/pictures', {templateUrl: '/partials/pictures.html'})\n    # .when('/profile', {templateUrl: '/partials/profile.html'})\n    # .when('/import', {templateUrl: '/partials/import.html'})\n    # .when('/register', {templateUrl: '/partials/register.html'})\n    # .when('/login', {templateUrl: '/partials/login.html'})\n    # .when('/logout', {templateUrl: '/partials/logout.html'})\n\n    # Catch all\n    .otherwise({redirectTo: '/'})\n\n  # Without server side support html5 must be disabled.\n  $locationProvider.html5Mode(false)\n])\n","'use strict'\n\n### Controllers ###\n\nangular.module('app.controllers', [])\n\n.controller('AppCtrl', [\n  '$scope'\n  '$location'\n  '$resource'\n  '$rootScope'\n\n($scope, $location, $resource, $rootScope) ->\n  $scope.$location = $location\n  $scope.$watch('$location.path()', (path) -> $scope.activeNavId = path || '/')\n  $scope.getClass = (id) -> if $scope.activeNavId.substring(0, id.length) == id then 'active' else ''\n])\n\n.controller('PicturesCtrl', ['$scope', 'Pictures', ($scope, Pictures) ->\n\n  $scope.Current = Pictures.getInitialPics (error, result) ->\n    return alert error if error\n    $scope.Current = result.data\n\n  $scope.feedback = (_id) ->\n    postBody = _.extend $scope.Current, clicked:_id\n    Pictures.getPicsByFeedback postBody, (error, result) ->\n      return alert error if error\n      $scope.Current = result.data\n])\n\n# .controller('LoginCtrl', ['$scope', 'User', ($scope, User) ->\n#   $scope.loginNewUser = ->\n#     userId = $scope.newUser.nodeId\n#     User.login (error, user) ->\n#       if error\n#         console.log \"LoginError! \", error\n#       else\n#         console.log \"Logged IN! \", user\n# ])\n","'use strict'\n\n### Directives ###\n\n# register the module with Angular\nangular.module('app.directives', [\n  # require the 'app.service' module\n  'app.services'\n])\n\n.directive('appVersion', [\n  'version'\n\n(version) ->\n\n  (scope, elm, attrs) ->\n    elm.text(version)\n])\n","'use strict'\n\n### Filters ###\n\nangular.module('app.filters', [])\n\n.filter('interpolate', [\n  'version',\n\n(version) ->\n  (text) ->\n    String(text).replace(/\\%VERSION\\%/mg, version)\n])\n","'use strict'\n\n### Sevices ###\n\nangular.module('app.services', [])\n\n.service(\"User\", [\"$http\", ($http) ->\n  user = {name: null, loggedIn: false}\n  return {\n    currentUser: -> user\n    login: (id, fn) ->\n      $http.post(\"/login\", {id: id}).then(\n        (data) -> fn? null, data\n        (data) -> fn? {error: (data.error or \"Node ID invalid!\")}, null\n      )\n    logout: ->\n      $http.post(\"/logout\").then(\n        (result) -> user = {name: null, loggedIn: false}\n        (result) -> user = {name: null, loggedIn: false} # force logout anyway :P\n      )\n    checkSession: ->\n      $http.get(\"/loggedin\").then(\n        (result) ->\n          user.name = result.data.name\n          user.loggedIn = true\n        (fail) ->\n      )\n  }\n])\n\n.service(\"Pictures\", [\"$http\", ($http) ->\n  getPicsByFeedback: (postBody, fn) ->\n    $http.post(\"/users/203468/pictures\", postBody).then(\n      (data) -> fn? null, data\n      (data) -> fn? {error: \"Something went wrong. Flickr unavailable?\"}, null\n    )\n  getInitialPics: (fn) ->\n    $http.get(\"/users/203468/pictures?_id=203747\").then(\n      (data) -> fn? null, data\n      (data) -> fn? {error: \"Something went wrong. Flickr unavailable?\"}, null\n    )\n])\n"]}